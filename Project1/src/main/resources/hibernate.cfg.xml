<?xml version="1.0" encoding="UTF-8"?>

<!-- When using Hibernate, we must configure it before using it. We typically 
	do so within a configuration file like this (which is conventionally called 
	hibernate.cfg.xml). Also note that you have the option to do an entirely 
	class based configuration for Hibernate. -->
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">

<!-- The root tag of a Hibernate configuration file is hibernate-configuration. 
	You'll find configuration information regarding your session factory and 
	your Hibernate models inside of this tag. -->
<hibernate-configuration>
	<!-- Our session factory tag is where we specify our credentials, dialect of SQL, 
	and various other properties pertaining to how a Hibernate session should be configured.
	A Hibernate session represents a connection to your DB. -->
	<session-factory>
		<!-- Specifying the Driver class (which should be on the classpath as we have JDBC in our pom). -->
		<property name="hibernate.connection.driver_class">org.postgresql.Driver</property>
		<!-- Specify the dialect of SQL you're using. -->
		<property name="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</property>
		<!-- Specify your DB credentials. Note that I have left the credentials blank as they should not be hardcoded here. -->
		<property name="hibernate.connection.url"></property>
		<property name="hibernate.connection.username"></property>
		<property name="hibernate.connection.password"></property>
		<!-- This next property is optional, but it can be useful if you want to know the SQL
		queries that Hibernate generates for you. -->
		<property name="show_sql">true</property>
		<!-- This property determines the connection pool size. -->
		<property name="hibernate.connection.pool_size">5</property>
		<!-- This property defines how Hibernate sessions are handled. In this case, sessions are tracked by their thread of execution. -->
		<property name="hibernate.current_session_context_class">thread</property>
		<!-- We can run Hibernate in several different "modes". The mode determines how
		involved Hibernate is in creating your DB tables. The modes are: create, update,
		create-drop, validate.
		
		create: Hibernate will purge the existing tables and create the tables from scratch. BAD PRACTICE.
		
		update: Hibernate will modify the schema without purging it. It will update any entities
		within the DB that are not consistent with our mapped Java models.
		
		create-drop: Hibernate creates all of the tables and then drops them when the application stops
		running; this is a good option for testing.
		
		validate: Hibernate will validate a pre-existing schema. This means that it will attempt to 
		make sure that your Java models are mapped in a way that is consistent with your existing
		schema.-->
		<property name="hibernate.hbm2ddl.auto">update</property>

		<!-- Once you have mapped your Java models using JPA annotations, you want to come
		back and list the mapped models in your SessionFactory.-->
		
		 <mapping class="com.revature.Request"/>
	</session-factory>
</hibernate-configuration>